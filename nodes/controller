#!/usr/bin/env python

import rospy
import sys
from std_msgs.msg import Float64, String
from mr_messages.srv import BondIDRequest, BondIDRequestResponse
from mr_messages.msg import WIND, Heading, Depth, Speed, GNSSData, ADCReading
from PyQt4 import QtGui, QtCore
from PyQt4.QtCore import QThread, pyqtSignal
from bondpy import bondpy
from remote_controller import design

PKG = 'pyqt_testing'



NODE = 'send_key_cmd'

PROP_SPEED = 127
RUDDER_SPEED = 40
SAIL_SPEED = 40


class Window(QtGui.QMainWindow, design.Ui_MainWindow):

    def __init__(self):
        self.rc = RosThread()
        # self.rc.start_node()
        super(Window, self).__init__()
        self.setupUi(self)
        self.home()

    def home(self):
        self.btnStartManual.clicked.connect(self.enable_manual)
        self.btnDisableManual.clicked.connect(self.disable_manual)
        self.btnDisableManual.hide()
        self.connect_signals()
        self.rc.start()
        self.show()

    def connect_signals(self):
        """Connect all signals needed to update the GUI from our ROS thread"""
        # self.connect(self.rc, SIGNAL("sail_data(float, float, str)"), self.update_sail_data)
        self.rc.sail_data_updated.connect(self.update_sail_data)
        self.rc.vessel_heading_updated.connect(self.update_vessel_heading)
        self.rc.water_depth_updated.connect(self.update_water_depth)
        self.rc.water_speed_updated.connect(self.update_water_speed)
        self.rc.gnss_data_updated.connect(self.update_gnss_data)
        self.rc.current_data_updated.connect(self.update_current_data)
        self.rc.volt_data_updated.connect(self.update_battery_voltage)

    def update_sail_data(self, speed, direction, reference):
        """Update GUI fields with provided data"""
        self.txtWindDir.setText("{0:.0f}".format(round(direction)))
        self.txtWindSpeed.setText("{0:.2f}".format(round(speed, 2)))

    def update_vessel_heading(self, heading):
        """Update GUI field with heading data"""
        self.txtHeading.setText(str(heading))

    def update_water_depth(self, depth):
        """Update GUI field with water depth and format float"""
        self.txtDepth.setText("{0:.2f}".format(round(depth, 2)))

    def update_water_speed(self, speed):
        """Update GUI field with water speed and format float"""
        self.txtWaterSpeed.setText("{0:.2f}".format(round(speed, 2)))

    def update_gnss_data(self, num_sats):
        """Update gui field with number of connected satellites"""
        self.txtNumSats.setText(str(num_sats))
        # make background green if 4 or more satellites are connected
        if num_sats >= 4:
            self.txtNumSats.setStyleSheet("background-color: rgb(0, 150, 0);color: rgb(255, 255, 255")
        # make background red if less than 4 satellites are connected
        else:
            self.txtNumSats.setStyleSheet("background-color: rgb(150, 0, 0);color: rgb(0, 0, 0")

    def update_current_data(self, current):
        self.txtCurrentDraw.setText("{0:.2f}".format(round(current, 2)))

    def update_battery_voltage(self, voltage):
        self.txtBatVoltage.setText("{0:.2f}".format(round(voltage, 2)))

    def enable_manual(self):
        self.rc.pub_manual_cmd("start_manual")
        self.txtMode.setStyleSheet("background-color: rgb(0, 150, 0);color: rgb(0, 0, 0)")
        self.txtMode.setText("MANUAL ENABLED")
        self.btnStartManual.hide()
        self.btnDisableManual.show()

    def disable_manual(self):
        self.rc.pub_manual_cmd("stop_manual")
        self.txtMode.setStyleSheet("background-color: rgb(150, 0, 0);color: rgb(255, 255, 255)")
        self.txtMode.setText("MANUAL DISABLED")
        self.rc.break_bond()
        self.btnStartManual.show()
        self.btnDisableManual.hide()

    def keyPressEvent(self, event):
        # SPEED EVENTS
        if event.key() == QtCore.Qt.Key_W and not event.isAutoRepeat():
            self.rc.pub_prop_effort(PROP_SPEED)
            rospy.loginfo("prop forward!")
        elif event.key() == QtCore.Qt.Key_S and not event.isAutoRepeat():
            self.rc.pub_prop_effort(-PROP_SPEED)
            rospy.loginfo("prop backwards!")

        # RUDDER EVENTS
        elif event.key() == QtCore.Qt.Key_D and not event.isAutoRepeat():
            self.rc.pub_rudder_effort(RUDDER_SPEED)
            rospy.loginfo("rudder right!")
        elif event.key() == QtCore.Qt.Key_A and not event.isAutoRepeat():
            self.rc.pub_rudder_effort(-RUDDER_SPEED)
            rospy.loginfo("rudder left!")

        # SAIL EVENTS
        elif event.key() == QtCore.Qt.Key_E and not event.isAutoRepeat():
            self.rc.pub_sail_effort(SAIL_SPEED)
            rospy.loginfo("sail right!")
        elif event.key() == QtCore.Qt.Key_Q and not event.isAutoRepeat():
            self.rc.pub_sail_effort(-SAIL_SPEED)
            rospy.loginfo("sail left!")

        event.accept()

    def keyReleaseEvent(self, event):
        # SPEED EVENTS
        if event.key() == QtCore.Qt.Key_W and not event.isAutoRepeat():
            self.rc.pub_prop_effort(0)
            rospy.loginfo("prop off!")
        elif event.key() == QtCore.Qt.Key_S and not event.isAutoRepeat():
            self.rc.pub_prop_effort(0)
            rospy.loginfo("prop off!")

        # RUDDER EVENTS
        elif event.key() == QtCore.Qt.Key_A and not event.isAutoRepeat():
            self.rc.pub_rudder_effort(0)
            rospy.loginfo("rudder off!")
        elif event.key() == QtCore.Qt.Key_D and not event.isAutoRepeat():
            self.rc.pub_rudder_effort(0)
            rospy.loginfo("rudder off!")

        # SAIL EVENTS
        elif event.key() == QtCore.Qt.Key_E and not event.isAutoRepeat():
            self.rc.pub_sail_effort(0)
            rospy.loginfo("sail off!")
        elif event.key() == QtCore.Qt.Key_Q and not event.isAutoRepeat():
            self.rc.pub_sail_effort(0)
            rospy.loginfo("sail off!")
        event.accept()

    def closeEvent(self, event):
        """Stop all motors on close"""
        self.rc.pub_prop_effort(0)
        self.rc.pub_rudder_effort(0)
        self.rc.pub_sail_effort(0)
        self.rc.break_bond()


class RosThread(QThread):

    sail_data_updated = pyqtSignal(float, float, str)
    vessel_heading_updated = pyqtSignal(int)
    water_depth_updated = pyqtSignal(float)
    water_speed_updated = pyqtSignal(float)
    gnss_data_updated = pyqtSignal(int)
    current_data_updated = pyqtSignal(float)
    volt_data_updated = pyqtSignal(float)

    def __init__(self):
        QThread.__init__(self)
        rospy.init_node(NODE, anonymous=True)
        self.last_current_update = rospy.get_time()
        self.last_volt_update = rospy.get_time()
        self.current_readings = []
        self.volt_readings = []
        self.bond = None
        self.rudder_effort_pub = rospy.Publisher('manual/cmd_rudder_effort',
                                                 Float64,
                                                 queue_size=1)
        self.prop_effort_pub = rospy.Publisher('manual/cmd_prop_effort',
                                               Float64,
                                               queue_size=1)
        self.sail_effort_pub = rospy.Publisher('manual/cmd_sail_effort',
                                               Float64,
                                               queue_size=1)
        self.mission_cmd_pub = rospy.Publisher('cmd_mission',
                                               String,
                                               queue_size=1)

    def pub_rudder_effort(self, effort):
        self.rudder_effort_pub.publish(effort)

    def pub_prop_effort(self, speed):
        self.prop_effort_pub.publish(speed)

    def pub_sail_effort(self, effort):
        self.sail_effort_pub.publish(effort)

    def pub_manual_cmd(self, cmd):
        self.mission_cmd_pub.publish(cmd)

    def handle_wind_info(self, wind_info):
        self.sail_data_updated.emit(wind_info.speed,
                                    wind_info.direction,
                                    wind_info.reference)

    def handle_vessel_heading(self, heading):
        self.vessel_heading_updated.emit(heading.heading)

    def handle_water_depth(self, depth):
        self.water_depth_updated.emit(depth.depth)

    def handle_water_speed(self, speed):
        self.water_speed_updated.emit(speed.speed)

    def handle_gnss(self, gnss):
        self.gnss_data_updated.emit(gnss.num_sats)

    def handle_current_draw(self, msg):
        self.current_readings.append(msg.value)
        # only update gui once a second
        if (rospy.get_time() - self.current_data_updated) > 1:
            curr_average = sum(self.current_readings)/len(self.current_readings)
            self.current_data_updated.emit(curr_average)
            # clear list
            del self.current_readings[:]

    def handle_battery_voltage(self, msg):
        self.volt_readings.append(msg.value)
        # only update gui once a second
        if (rospy.get_time() - self.volt_data_updated) > 1:
            volt_average = sum(self.volt_readings)/len(self.volt_readings)
            self.volt_data_updated.emit(volt_average)
            # clear list
            del self.volt_readings[:]

    def _create_bond(self, req):
        self.flush_broken()
        id = req.id
        topic = req.topic
        rospy.loginfo("Received bond request with id {} and topic {}".format(id, topic))
        #self.bond = bondpy.Bond(topic, id, on_broken=self.shutdown_bond)
        self.bond = bondpy.Bond(topic, id)
        self.bond.start()
        rospy.loginfo("Started bond")
        success = True
        return BondIDRequestResponse(success)

    def flush_broken(self):
        """Shutdown bond if a broken bond exists"""
        if self.bond is not None and self.bond.is_broken():
            self.shutdown_bond

    def shutdown_bond(self):
        self.bond.shutdown()
        rospy.loginfo("bond was shutdown")

    def break_bond(self):
        try:
            self.bond.break_bond()
            rospy.loginfo("bond broken successfully")
        except AttributeError:
            rospy.logerr("couldn't break bond, never created")
            pass

    def run(self):
        s = rospy.Service('share_bond_id',
                          BondIDRequest,
                          self._create_bond)
        rospy.Subscriber("wind_info", WIND, self.handle_wind_info)
        rospy.Subscriber("vessel_heading", Heading, self.handle_vessel_heading)
        rospy.Subscriber("water_depth", Depth, self.handle_water_depth)
        rospy.Subscriber("water_speed", Speed, self.handle_water_speed)
        rospy.Subscriber("gnss_position", GNSSData, self.handle_gnss)
        rospy.Subscriber("current_draw", ADCReading, self.handle_current_draw)
        rospy.Subscriber("battery_voltage", ADCReading, self.handle_battery_voltage)
        rospy.spin()


if __name__ == '__main__':
    app = QtGui.QApplication(sys.argv)
    GUI = Window()
    sys.exit(app.exec_())
