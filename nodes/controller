#!/usr/bin/env python

import rospy
import sys
from std_msgs.msg import Float64, String
from mr_messages.msg import Speed
from mr_messages.srv import BondIDRequest, BondIDRequestResponse
from PyQt4 import QtGui, QtCore
from bondpy import bondpy

PKG = 'pyqt_testing'

NODE = 'send_key_cmd'

PROP_SPEED = 127
RUDDER_SPEED = 40
SAIL_SPEED = 40


class Window(QtGui.QMainWindow):

    def __init__(self):
        self.rc = RosCommands()
        self.rc.start_node()
        super(Window, self).__init__()
        self.setGeometry(50, 50, 500, 300)
        self.setWindowTitle("manual boat control test")
        self.home()

    def home(self):
        btn = QtGui.QPushButton("Enable manual control", self)
        btn.clicked.connect(self.enable_manual)
        btn.resize(btn.minimumSizeHint())
        btn.move(0,0)
        self.show()

    def enable_manual(self):
        self.rc.pub_manual_cmd("start_manual")

    def keyPressEvent(self, event):

        # SPEED EVENTS
        if event.key() == QtCore.Qt.Key_W and not event.isAutoRepeat():
            self.rc.pub_prop_effort(PROP_SPEED)
            rospy.loginfo("prop forward!")
        elif event.key() == QtCore.Qt.Key_S and not event.isAutoRepeat():
            self.rc.pub_prop_effort(-PROP_SPEED)
            rospy.loginfo("prop backwards!")

        # RUDDER EVENTS
        elif event.key() == QtCore.Qt.Key_D and not event.isAutoRepeat():
            self.rc.pub_rudder_effort(RUDDER_SPEED)
            rospy.loginfo("rudder right!")
        elif event.key() == QtCore.Qt.Key_A and not event.isAutoRepeat():
            self.rc.pub_rudder_effort(-RUDDER_SPEED)
            rospy.loginfo("rudder left!")

        # SAIL EVENTS
        elif event.key() == QtCore.Qt.Key_E and not event.isAutoRepeat():
            self.rc.pub_sail_effort(SAIL_SPEED)
            rospy.loginfo("sail right!")
        elif event.key() == QtCore.Qt.Key_Q and not event.isAutoRepeat():
            self.rc.pub_sail_effort(-SAIL_SPEED)
            rospy.loginfo("sail left!")

        event.accept()

    def keyReleaseEvent(self, event):

        # SPEED EVENTS
        if event.key() == QtCore.Qt.Key_W and not event.isAutoRepeat():
            self.rc.pub_prop_effort(0)
            rospy.loginfo("prop off!")
        elif event.key() == QtCore.Qt.Key_S and not event.isAutoRepeat():
            self.rc.pub_prop_effort(0)
            rospy.loginfo("prop off!")

        # RUDDER EVENTS
        elif event.key() == QtCore.Qt.Key_A and not event.isAutoRepeat():
            self.rc.pub_rudder_effort(0)
            rospy.loginfo("rudder off!")
        elif event.key() == QtCore.Qt.Key_D and not event.isAutoRepeat():
            self.rc.pub_rudder_effort(0)
            rospy.loginfo("rudder off!")

        # SAIL EVENTS
        elif event.key() == QtCore.Qt.Key_E and not event.isAutoRepeat():
            self.rc.pub_sail_effort(0)
            rospy.loginfo("sail off!")
        elif event.key() == QtCore.Qt.Key_Q and not event.isAutoRepeat():
            self.rc.pub_sail_effort(0)
            rospy.loginfo("sail off!")
        event.accept()

    def closeEvent(self, event):
        """Stop all motors on close"""
        self.rc.pub_prop_effort(0)
        self.rc.pub_rudder_effort(0)
        self.rc.pub_sail_effort(0)
        self.rc.break_bond()


class RosCommands(object):

    def __init__(self):
        rospy.init_node(NODE, anonymous=True)
        self.rudder_effort_pub = rospy.Publisher('manual/cmd_rudder_effort',
                                                 Float64,
                                                 queue_size=1)
        self.prop_effort_pub = rospy.Publisher('manual/cmd_prop_effort',
                                               Float64,
                                               queue_size=1)
        self.sail_effort_pub = rospy.Publisher('manual/cmd_sail_effort',
                                               Float64,
                                               queue_size=1)
        self.mission_cmd_pub = rospy.Publisher('cmd_mission',
                                               String,
                                               queue_size=1)

    def pub_rudder_effort(self, effort):
        self.rudder_effort_pub.publish(effort)

    def pub_prop_effort(self, speed):
        self.prop_effort_pub.publish(speed)

    def pub_sail_effort(self, effort):
        self.sail_effort_pub.publish(effort)

    def pub_manual_cmd(self, cmd):
        self.mission_cmd_pub.publish(cmd)

    def create_bond(self, req):
        id = req.id
        topic = req.topic
        rospy.loginfo("Received bond request with id {} and topic {}".format(id, topic))
        self.bond = bondpy.Bond(topic, id)
        self.bond.start()
        rospy.loginfo("Started bond")
        success = True
        return BondIDRequestResponse(success)

    def break_bond(self):
        self.bond.break_bond()

    def start_node(self):
        s = rospy.Service('share_bond_id',
                          BondIDRequest,
                          self.create_bond)

if __name__ == '__main__':
    app = QtGui.QApplication(sys.argv)
    GUI = Window()
    sys.exit(app.exec_())