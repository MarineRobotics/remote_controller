#!/usr/bin/env python3

import rospy
import sys
from std_msgs.msg import Float64, String
from mr_messages.srv import BondIDRequest, BondIDRequestResponse
from mr_messages.msg import WIND, Heading, Depth, Speed, GNSSData, ADCReading, RoboclawStatus
from PyQt5 import QtGui, QtCore, uic, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QApplication
from PyQt5.QtCore import QThread, pyqtSignal
from bondpy import bondpy
from remote_controller import design

PKG = 'remote_controller'



NODE = 'send_key_cmd'

PROP_SPEED = 127
RUDDER_SPEED = 100
SAIL_SPEED = 100
COLOR_WARN = "rgb(252, 186, 3)"
COLOR_ERR = "rgb(186, 7, 7)"
COLOR_OK = "rgb(0, 150, 0)"

class Window(QtWidgets.QMainWindow, design.Ui_MainWindow):

    def __init__(self):
        self.rc = RosThread()
        # self.rc.start_node()
        super(Window, self).__init__()
        self.setupUi(self)
        self.home()

        self.ERRORS = {
            0x0000: ("ok", "Normal", COLOR_OK),
            0x0001: ("warn", "M1 over current", COLOR_WARN),
            0x0002: ("warn", "M2 over current", COLOR_WARN),
            0x0004: ("error", "Emergency Stop", COLOR_ERR),
            0x0008: ("error", "Temperature1", COLOR_ERR),
            0x0010: ("error", "Temperature2", COLOR_ERR),
            0x0020: ("error", "Main batt voltage high", COLOR_ERR),
            0x0040: ("error", "Logic batt voltage high", COLOR_ERR),
            0x0080: ("error", "Logic batt voltage low", COLOR_ERR),
            0x0100: ("warn", "M1 driver fault", COLOR_WARN),
            0x0200: ("warn", "M2 driver fault", COLOR_WARN),
            0x0400: ("warn", "Main batt voltage high", COLOR_WARN),
            0x0800: ("warn", "Main batt voltage low", COLOR_WARN),
            0x1000: ("warn", "Temperature1", COLOR_WARN),
            0x2000: ("warn", "Temperature2", COLOR_WARN),
            0x4000: ("ok", "M1 home", COLOR_OK),
            0x8000: ("ok", "M2 home", COLOR_OK)
            }

    def home(self):
        # Setup enable/disable buttons
        self.btnStartManual.clicked.connect(self.enable_manual)
        self.btnDisableManual.clicked.connect(self.disable_manual)
        self.btnDisableManual.hide()
        # Setup prop on/off buttons
        self.btnPropOn.hide()
        self.btnPropOff.hide()
        self.btnPropOn.clicked.connect(self.start_prop)
        self.btnPropOff.clicked.connect(self.stop_prop)
        self.btnDesHeading.clicked.connect(self.set_heading)
        self.btnDesSail.clicked.connect(self.set_sail_heading)
        self.btnDesSailAngle.clicked.connect(self.set_sail_angle)
        self.btnDesROT.clicked.connect(self.set_rot)
        self.btnStop.clicked.connect(self.stop_all)
        self.connect_signals()

        self.timer = QtCore.QTimer(self)
        self.timer.setInterval(1000)
        self.timer.timeout.connect(self.displayTime)
        self.timer.start()

        self.rc.start()
        self.show()

    def displayTime(self):
        self.txtUTC.setText(QtCore.QDateTime.currentDateTime().toUTC().toString())

    def connect_signals(self):
        """Connect all signals needed to update the GUI from our ROS thread"""
        # self.connect(self.rc, SIGNAL("sail_data(float, float, str)"), self.update_sail_data)
        self.rc.sail_data_updated.connect(self.update_sail_data)
        self.rc.vessel_heading_updated.connect(self.update_vessel_heading)
        self.rc.sail_heading_updated.connect(self.update_sail_heading)
        self.rc.water_depth_updated.connect(self.update_water_depth)
        self.rc.temperature_updated.connect(self.update_temperature)
        self.rc.humidity_updated.connect(self.update_humidity)
        self.rc.air_pressure_updated.connect(self.update_air_pressure)
        self.rc.water_speed_updated.connect(self.update_water_speed)
        self.rc.gnss_data_updated.connect(self.update_gnss_data)
        self.rc.current_data_updated.connect(self.update_current_data)
        self.rc.volt_data_updated.connect(self.update_battery_voltage)
        self.rc.robo_status_updated.connect(self.update_roboclaw_status)
        self.rc.state_change_updated.connect(self.update_state_change)
        self.rc.substate_change_updated.connect(self.update_substate_change)

    def update_sail_data(self, speed, direction, reference):
        """Update GUI fields with provided data"""
        self.txtWindDir.setText("{0:.0f}".format(round(direction)))
        self.txtWindSpeed.setText("{0:.2f}".format(round(speed, 2)))

    def update_vessel_heading(self, heading):
        """Update GUI field with heading data"""
        self.txtHeading.setText(str(heading))

    def update_sail_heading(self, heading):
        """Update GUI field with heading data"""
        self.txtHeading_2.setText(str(heading))

    def update_water_depth(self, depth):
        """Update GUI field with water depth and format float"""
        self.txtDepth.setText("{0:.2f}".format(round(depth, 2)))

    def update_temperature(self, temp):
        """Update GUI field with temperature and format float"""
        self.txtTemp.setText("{0:.2f}".format(round(temp, 2)))

    def update_humidity(self, humid):
        """Update GUI field with humidity and format float"""
        self.txtHumid.setText("{0:.2f}".format(round(humid, 2)))

    def update_air_pressure(self, pressure):
        """Update GUI field with air pressure and format float"""
        self.txtPres.setText("{0:.2f}".format(round(pressure, 2)))

    def update_water_speed(self, speed):
        """Update GUI field with water speed and format float"""
        self.txtWaterSpeed.setText("{0:.2f}".format(round(speed, 2)))

    def update_state_change(self, state):
        """Update GUI field with boat state change"""
        self.txtState.setText(str(state))

    def update_substate_change(self, substate):
        """Update GUI field with boat substate change"""
        self.txtSubstate.setText(str(substate))

    def update_gnss_data(self, num_sats):
        pass
        """Update gui field with number of connected satellites"""
        self.txtNumSats.setText(str(num_sats))
        # make background green if 4 or more satellites are connected
        if num_sats >= 4:
            self.txtNumSats.setStyleSheet("background-color: rgb(0, 150, 0);color: rgb(255, 255, 255)")
        # make background red if less than 4 satellites are connected
        else:
            self.txtNumSats.setStyleSheet("background-color: rgb(150, 0, 0);color: rgb(0, 0, 0)")

    def update_current_data(self, current):
        self.txtCurrentDraw.setText("{0:.2f}".format(round(current, 2)))

    def update_battery_voltage(self, voltage):
        self.txtBatVoltage.setText("{0:.2f}".format(round(voltage, 2)))

    def update_roboclaw_status(self, address, status_id, status_msg):
        if address == 0x80:
            text_field = self.txt0x80Status
        elif address == 0x81:
            text_field = self.txt0x81Status
        text_field.setText("{}: {}".format(hex(address), status_msg))
        text_field.setStyleSheet("background-color: {}"
                                    .format(self.ERRORS[status_id][2]))

    def set_heading(self):
        des_heading = int(self.txtDesHeading.text())
        self.rc.pub_boat_heading(des_heading)

    def set_sail_heading(self):
        des_heading = int(self.txtDesSail.text())
        self.rc.pub_sail_heading(des_heading)

    def set_sail_angle(self):
        des_angle = int(self.txtDesSailAngle.text())
        self.rc.pub_sail_angle(des_angle)

    def set_rot(self):
        des_rot = float(self.txtDesROT.text())
        self.rc.pub_rot(des_rot)

    def stop_all(self):
        rospy.loginfo("pressed stop all button")
        self.rc.pub_rudder_effort(0)
        self.rc.pub_sail_effort(0)
        self.rc.pub_prop_effort(0)

    def enable_manual(self):
        self.rc.pub_manual_cmd("start_manual")
        self.txtMode.setStyleSheet("background-color: rgb(0, 150, 0);color: rgb(0, 0, 0)")
        self.txtMode.setText("MANUAL ENABLED")
        self.btnStartManual.hide()
        self.btnDisableManual.show()
        self.btnPropOn.show()

    def disable_manual(self):
        self.rc.pub_manual_cmd("stop_manual")
        self.txtMode.setStyleSheet("background-color: rgb(150, 0, 0);color: rgb(255, 255, 255)")
        self.txtMode.setText("MANUAL DISABLED")
        self.rc.break_bond()
        self.btnStartManual.show()
        self.btnDisableManual.hide()
        self.btnPropOn.hide()
        self.btnPropOff.hide()

    def start_prop(self):
        self.rc.pub_prop_effort(PROP_SPEED)
        rospy.loginfo("prop on")
        self.btnPropOff.show()
        self.btnPropOn.hide()

    def stop_prop(self):
        self.rc.pub_prop_effort(0)
        rospy.loginfo("prop off")
        self.btnPropOn.show()
        self.btnPropOff.hide()

    def keyPressEvent(self, event):
        # SPEED EVENTS
        if event.key() == QtCore.Qt.Key_W and not event.isAutoRepeat():
            self.rc.pub_prop_effort(PROP_SPEED)
            rospy.loginfo("prop forward!")
        elif event.key() == QtCore.Qt.Key_S and not event.isAutoRepeat():
            self.rc.pub_prop_effort(-PROP_SPEED)
            rospy.loginfo("prop backwards!")

        # RUDDER EVENTS
        elif event.key() == QtCore.Qt.Key_D and not event.isAutoRepeat():
            self.rc.pub_rudder_effort(RUDDER_SPEED)
            rospy.loginfo("rudder right!")
        elif event.key() == QtCore.Qt.Key_A and not event.isAutoRepeat():
            self.rc.pub_rudder_effort(-RUDDER_SPEED)
            rospy.loginfo("rudder left!")

        # SAIL EVENTS
        elif event.key() == QtCore.Qt.Key_E and not event.isAutoRepeat():
            self.rc.pub_sail_effort(SAIL_SPEED)
            rospy.loginfo("sail right!")
        elif event.key() == QtCore.Qt.Key_Q and not event.isAutoRepeat():
            self.rc.pub_sail_effort(-SAIL_SPEED)
            rospy.loginfo("sail left!")

        event.accept()

    def keyReleaseEvent(self, event):
        # SPEED EVENTS
        if event.key() == QtCore.Qt.Key_W and not event.isAutoRepeat():
            self.stop_prop()
        elif event.key() == QtCore.Qt.Key_S and not event.isAutoRepeat():
            self.stop_prop()

        # RUDDER EVENTS
        elif event.key() == QtCore.Qt.Key_A and not event.isAutoRepeat():
            self.rc.pub_rudder_effort(0)
            rospy.loginfo("rudder off!")
        elif event.key() == QtCore.Qt.Key_D and not event.isAutoRepeat():
            self.rc.pub_rudder_effort(0)
            rospy.loginfo("rudder off!")

        # SAIL EVENTS
        elif event.key() == QtCore.Qt.Key_E and not event.isAutoRepeat():
            self.rc.pub_sail_effort(0)
            rospy.loginfo("sail off!")
        elif event.key() == QtCore.Qt.Key_Q and not event.isAutoRepeat():
            self.rc.pub_sail_effort(0)
            rospy.loginfo("sail off!")
        event.accept()

    def closeEvent(self, event):
        """Stop all motors on close"""
        self.rc.pub_prop_effort(0)
        self.rc.pub_rudder_effort(0)
        self.rc.pub_sail_effort(0)
        self.rc.break_bond()


class RosThread(QThread):

    sail_data_updated = pyqtSignal(float, float, str)
    vessel_heading_updated = pyqtSignal(int)
    sail_heading_updated = pyqtSignal(int)
    water_depth_updated = pyqtSignal(float)
    temperature_updated = pyqtSignal(float)
    humidity_updated = pyqtSignal(float)
    air_pressure_updated = pyqtSignal(float)
    water_speed_updated = pyqtSignal(float)
    gnss_data_updated = pyqtSignal(int)
    current_data_updated = pyqtSignal(float)
    volt_data_updated = pyqtSignal(float)
    robo_status_updated = pyqtSignal(int, int, str)
    state_change_updated = pyqtSignal(str)
    substate_change_updated = pyqtSignal(str)

    def __init__(self):
        QThread.__init__(self)
        rospy.init_node(NODE, anonymous=True)
        self.last_current_update = rospy.get_time()
        self.last_volt_update = rospy.get_time()
        self.current_readings = []
        self.volt_readings = []
        self.bond = None
        self.rudder_effort_pub = rospy.Publisher('manual/cmd_rudder_effort',
                                                 Float64,
                                                 queue_size=1)
        self.prop_effort_pub = rospy.Publisher('manual/cmd_prop_effort',
                                               Float64,
                                               queue_size=1)
        self.sail_effort_pub = rospy.Publisher('manual/cmd_sail_effort',
                                               Float64,
                                               queue_size=1)
        self.boat_heading_pub = rospy.Publisher('manual/cmd_heading',
                                                Heading,
                                                queue_size=1)
        self.sail_heading_pub = rospy.Publisher('manual/cmd_sail_heading',
                                                Heading,
                                                queue_size=1)
        self.sail_angle_pub = rospy.Publisher('manual/cmd_sail_angle',
                                                Heading,
                                                queue_size=1)
        self.boat_rot_pub = rospy.Publisher('manual/cmd_rot',
                                            Float64,
                                            queue_size=1)
        self.mission_cmd_pub = rospy.Publisher('cmd_mission',
                                               String,
                                               queue_size=1)

    def pub_rudder_effort(self, effort):
        rospy.loginfo("[REMOTE CTRL] entered pub rudder effort handler")        
        self.rudder_effort_pub.publish(effort)

    def pub_prop_effort(self, speed):
        rospy.loginfo("[REMOTE CTRL] entered pub prop effort handler")
        self.prop_effort_pub.publish(speed)
        rospy.loginfo("[REMOTE CTRL] finished calling prop effort publisher")

    def pub_sail_effort(self, effort):
        self.sail_effort_pub.publish(effort)

    def pub_boat_heading(self, heading):
        msg = Heading()
        msg.heading = heading
        self.boat_heading_pub.publish(msg)

    def pub_sail_heading(self, heading):
        msg = Heading()
        msg.heading = heading
        self.sail_heading_pub.publish(msg)

    def pub_sail_angle(self, angle):
        msg = Heading()
        msg.heading = angle
        self.sail_angle_pub.publish(msg)

    def pub_rot(self, rot):
        self.boat_rot_pub.publish(rot)

    def pub_manual_cmd(self, cmd):
        self.mission_cmd_pub.publish(cmd)

    def handle_wind_info(self, wind_info):
        self.sail_data_updated.emit(wind_info.speed,
                                    wind_info.direction,
                                    wind_info.reference)

    def handle_vessel_heading(self, heading):
        self.vessel_heading_updated.emit(heading.heading)

    def handle_sail_heading(self, heading):
        self.sail_heading_updated.emit(heading.heading)

    def handle_water_depth(self, depth):
        self.water_depth_updated.emit(depth.depth)

    def handle_temperature(self, temp):
        self.temperature_updated.emit(temp.temp)

    def handle_humidity(self, humid):
        self.humidity_updated.emit(humid.humid)

    def handle_air_pressure(self, pressure):
        self.air_pressure_updated.emit(pressure.pressure)

    def handle_water_speed(self, speed):
        self.water_speed_updated.emit(speed.speed)

    def handle_state_change(self, state):
        self.state_change_updated.emit(state.data)

    def handle_substate_change(self, substate):
        self.substate_change_updated.emit(substate.data)

    def handle_gnss(self, gnss):
        self.gnss_data_updated.emit(gnss.num_sats)

    def handle_current_draw(self, msg):
        self.current_readings.append(msg.value)
        # only update gui once a second
        if (rospy.get_time() - self.last_current_update) > 1:
            curr_average = sum(self.current_readings)/len(self.current_readings)
            self.current_data_updated.emit(curr_average)
            # clear list
            del self.current_readings[:]

    def handle_battery_voltage(self, msg):
        self.volt_readings.append(msg.value)
        # only update gui once a second
        if (rospy.get_time() - self.last_volt_update) > 1:
            volt_average = sum(self.volt_readings)/len(self.volt_readings)
            self.volt_data_updated.emit(volt_average)
            # clear list
            del self.volt_readings[:]

    #TODO: create fields per unique address, so to automatically show robo claw
    # status no matter what its address is or how many there are.
    def handle_roboclaw_status(self, msg):
        # time = msg.time
        address = msg.address
        status_id = msg.status_id
        status = msg.status_message
        self.robo_status_updated.emit(address, status_id, status)

    def _create_bond(self, req):
        self.flush_broken()
        id = req.id
        topic = req.topic
        rospy.loginfo("Received bond request with id {} and topic {}".format(id, topic))
        #self.bond = bondpy.Bond(topic, id, on_broken=self.shutdown_bond)
        self.bond = bondpy.Bond(topic, id)
        self.bond.start()
        rospy.loginfo("Started bond")
        success = True
        return BondIDRequestResponse(success)

    def flush_broken(self):
        """Shutdown bond if a broken bond exists"""
        if self.bond is not None and self.bond.is_broken():
            self.shutdown_bond()

    def shutdown_bond(self):
        self.bond.shutdown()
        rospy.loginfo("bond was shutdown")

    def break_bond(self):
        try:
            self.bond.break_bond()
            rospy.loginfo("bond broken successfully")
        except AttributeError:
            rospy.logerr("couldn't break bond, never created")
        finally:
            return

    def run(self):
        rospy.loginfo("entered run thread")
        s = rospy.Service('share_bond_id',
                          BondIDRequest,
                          self._create_bond)
        rospy.loginfo("sent bond service")
        rospy.Subscriber("wind_info", WIND, self.handle_wind_info)
        rospy.Subscriber("vessel_heading", Heading, self.handle_vessel_heading)
        rospy.Subscriber("sail_heading", Heading, self.handle_sail_heading)
        rospy.Subscriber("water_depth", Depth, self.handle_water_depth)
        rospy.Subscriber("temperature", TEMP, self.handle_temperature)
        rospy.Subscriber("humidity", HUMIDITY, self.handle_humidity)
        rospy.Subscriber("pressure", PRESSURE, self.handle_air_pressure)
        rospy.Subscriber("water_speed", Speed, self.handle_water_speed)
        rospy.Subscriber("gnss_position", GNSSData, self.handle_gnss)
        rospy.Subscriber("current_ave", ADCReading, self.handle_current_draw)
        rospy.Subscriber("voltage_ave", ADCReading, self.handle_battery_voltage)
        rospy.Subscriber("roboclaw_status", RoboclawStatus, self.handle_roboclaw_status)
        rospy.Subscriber("state_change", String, self.handle_state_change)
        rospy.Subscriber("substate_change", String, self.handle_substate_change)
        rospy.spin()


if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    GUI = Window()
    sys.exit(app.exec_())
